---
import Dropdown from "../components/Dropdown.astro";

let citySelect = [
  'Austin', 'Boston', 'Chicago', 'Columbus', 'Dallas',
  'Denver', 'Detroit', 'El Paso', 'Fort Worth', 'Houston',
  'Indianapolis', 'Jacksonville', 'Las Vegas', 'Los Angeles', 'Memphis',
  'Miami', 'Nashville', 'New Orleans', 'New York', 'Oklahoma City',
  'Philadelphia', 'Phoenix', 'Portland', 'San Antonio', 'San Diego', 'San Francisco',
  'Seattle', 'Tucson', 'Virginia Beach', 'Washington'
];



---
<div id ='weather-search'>
    <input
        id="weather-input" class="w-full p-2 rounded-md border-gray-500 text-black h-12 mt-2 text-xs sm:xs md:text-base lg:text-base"
        placeholder="Search Weather by City's Name..."
    />

    <button id="search-button" class="dark:text-black bg-gray-800 dark:bg-slate-400 p-2 mt-2 w-[320px] rounded-md h-10 text-sm sm:text-base md:text-base lg:text-lg
    hover:text-blue-400 dark:hover:text-blue-900 ">Search</button>
   
</div>

<Dropdown  title={"Select a City"} items={citySelect}/>

<div id="weather-info" class="mt-4 text-center text-white font-mono bg-slate-800 dark:text-black dark:bg-slate-400">
    <p>Search or choose a city from the dropdown to see its weather...</p>
</div>

<script type="module">
const fetchWeatherData = async (locationInput) => {
    const weatherInfo = document.getElementById('weather-info');
    locationInput = locationInput.trim();
    
    let cityName, userState;

    if (locationInput.includes(',')) {
        // Case 1: User included a comma → "City, State"
        [cityName, userState] = locationInput.split(',').map(part => part.trim());
    } else {
        // Case 2: No comma 
        const parts = locationInput.split(' ');
        const lastWord = parts[parts.length - 1];

        if (isStateName(lastWord) || isStateAbbreviation(lastWord)) {
            userState = lastWord;
            cityName = parts.slice(0, -1).join(' '); 
        } else {
            cityName = locationInput;
            userState = null; 
        }
    }

    const cityCode = encodeURIComponent(cityName);

    try {
        const response = await fetch(`https://wttr.in/${cityCode}?format=j1`);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const data = await response.json();
        const apiCityName = data.nearest_area[0].areaName[0].value;
        const apiState = data.nearest_area[0].region[0].value; // State from API

        console.log(`API City: ${apiCityName}, API State: ${apiState}`);

        if (cityName.toLowerCase() !== apiCityName.toLowerCase()) {
            throw new Error(`No City Found Matching "${locationInput}"`);
        }

        if (userState && !stateMatch(userState, apiState)) {
            throw new Error(`No City Found Matching "${locationInput}"`);
        }

  

        // Current Weather
        const current = data.current_condition[0];
        const weatherDescription = current.weatherDesc[0].value;
        const weatherEmoji = getWeatherEmoji(weatherDescription);

        // Daily Forecast (next 3 days)
        const dailyForecast = data.weather.slice(0, 3).map(day => `
            <div class="daily-forecast bg-slate-700 rounded-lg p-4 mb-2 text-sm sm:text-base md:text-lg lg:text-xl dark:text-black dark:bg-slate-300">
                <h3 class="text-sm sm:text-base md:text-lg lg:text-xl font-bold">${formatDate(day.date)}</h3>
                <p>Average Temp: ${day.avgtempF} °F </p>
                <p>Weather: ${getWeatherEmoji(day.hourly[0].weatherDesc[0].value)} ${day.hourly[0].weatherDesc[0].value}</p>
                <p>Sunrise: ${day.astronomy[0].sunrise} | Sunset: ${day.astronomy[0].sunset}</p>
            </div>
        `).join('');

        weatherInfo.innerHTML = `
            <h2 class="weather-title text-2xl text-lg sm:text-lg md:text-xl lg:text-2xl font-mono font-bold mt-4 mb-4 dark:text-black">${apiCityName}, ${apiState}</h2>
            <p class="text-white font-mono text-sm sm:text-base md:text-lg lg:text-xl dark:text-black">Current Temperature: ${current.temp_F} °F</p>
            <p class="text-white font-mono text-sm sm:text-base md:text-lg lg:text-xl dark:text-black">Feels Like: ${current.FeelsLikeF} °F</p>
            <p class="text-white font-mono text-sm sm:text-base md:text-lg lg:text-xl dark:text-black">
                Weather Description: ${weatherEmoji} ${weatherDescription.trim()}
            </p>
            <p class="text-white font-mono text-sm sm:text-base md:text-lg lg:text-xl dark:text-black">Humidity: ${current.humidity}%</p>
            <p class="text-white font-mono text-sm sm:text-base md:text-lg lg:text-xl dark:text-black">Wind Speed: ${current.windspeedMiles} mph</p>
            <div class="daily-forecasts mt-6">
                <h3 class="text-2xl text-base sm:text-base md:text-xl lg:text-2xl font-bold text-white dark:text-black">3-Day Forecast</h3>
                <br />
                ${dailyForecast}
            </div>
        `;
    } catch (err) {
        console.error('Fetch error:', err.message);
        weatherInfo.innerHTML = `<p class="text-white">Cannot Find Weather For "${locationInput}"</p>`;
    }
};

//Helper Function : Check word is full state name
const isStateName = (word) => {
    const stateNames = [
        "Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware",
        "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", 
        "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", 
        "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", 
        "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", 
        "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", 
        "West Virginia", "Wisconsin", "Wyoming"
    ];
    return stateNames.includes(word);
};

// Helper function: Check if a word is a state abbreviation (e.g., TX, CA)
const isStateAbbreviation = (word) => {
    const stateAbbreviations = [
        "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE",
        "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", 
        "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", 
        "MT", "NE", "NV", "NH", "NJ", "NM", "NY", 
        "NC", "ND", "OH", "OK", "OR", "PA", "RI", 
        "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", 
        "WV", "WI", "WY"
    ];
    return stateAbbreviations.includes(word.toUpperCase());
};

// Helper function: Allow matching state abbreviations and full names
const stateMatch = (userState, apiState) => {
    const stateMapping = {
        "AL": "Alabama", "AK": "Alaska", "AZ": "Arizona", "AR": "Arkansas", "CA": "California",
        "CO": "Colorado", "CT": "Connecticut", "DE": "Delaware", "FL": "Florida", "GA": "Georgia",
        "HI": "Hawaii", "ID": "Idaho", "IL": "Illinois", "IN": "Indiana", "IA": "Iowa", "KS": "Kansas",
        "KY": "Kentucky", "LA": "Louisiana", "ME": "Maine", "MD": "Maryland", "MA": "Massachusetts",
        "MI": "Michigan", "MN": "Minnesota", "MS": "Mississippi", "MO": "Missouri", "MT": "Montana",
        "NE": "Nebraska", "NV": "Nevada", "NH": "New Hampshire", "NJ": "New Jersey", "NM": "New Mexico",
        "NY": "New York", "NC": "North Carolina", "ND": "North Dakota", "OH": "Ohio", "OK": "Oklahoma",
        "OR": "Oregon", "PA": "Pennsylvania", "RI": "Rhode Island", "SC": "South Carolina", "SD": "South Dakota",
        "TN": "Tennessee", "TX": "Texas", "UT": "Utah", "VT": "Vermont", "VA": "Virginia", "WA": "Washington",
        "WV": "West Virginia", "WI": "Wisconsin", "WY": "Wyoming"
    };

    const userStateNormalized = userState.length === 2 ? stateMapping[userState.toUpperCase()] : userState;
    return userStateNormalized && userStateNormalized.toLowerCase() === apiState.toLowerCase();
};

    const handleSelection = (event) => {
        const selectedValue = event.target.getAttribute('data-value'); 
        if (selectedValue) {
            fetchWeatherData(selectedValue); 
        }
    };

    document.addEventListener("DOMContentLoaded", () => {
        const dropdownItems = document.querySelectorAll(".dropdown-item"); 
        dropdownItems.forEach(item => {
            item.addEventListener("click", handleSelection); 
        });
    });

    const getWeatherEmoji = (description) => {
        switch (description.trim().toLowerCase()) {
            case 'clear': return '☀️';
            case 'sunny': return '🌞';
            case 'rainy': return '🌧️';
            case 'cloudy': return '☁️';
            case 'overcast': return '☁️';
            case 'mist': return '🌫️';
            case 'partly cloudy': return '⛅';
            case 'thunderstorm': return '⛈️';
            case 'snow': return '❄️';
            case 'fog': return '🌫️';
            case 'windy': return '💨';
            default: return '☀️';
        }
    };

    const formatDate = (dateString) => {
    const [year, month, day] = dateString.split('-'); 
    return `${month}-${day}-${year}`; 
};
document.addEventListener("DOMContentLoaded", () => {
        const dropdownItems = document.querySelectorAll(".dropdown-item"); 
        dropdownItems.forEach(item => {
            item.addEventListener("click", handleSelection); 
        });
    });

document.addEventListener("DOMContentLoaded", () => {
  const searchButton = document.getElementById("search-button");
  const weatherInput = document.getElementById("weather-input");
searchButton.addEventListener("click", () => {
    const searchQuery = weatherInput.value.trim();
    if(searchQuery !== '') {
      fetchWeatherData(searchQuery);
    } else {
      throw new Error("Please enter a city or zip code");
    }
  });
weatherInput.addEventListener("keyup", (event) => {
    if(event.key === "Enter") {
      const searchQuery = weatherInput.value.trim();
      if(searchQuery !== '') {
        fetchWeatherData(searchQuery);
      } else {
        console.log("Please enter a city or zip code");
      }
    }
  });
});

</script>


<style>
     #weather-info {
        height: 800px;
        width: 600px;
        margin: 50px auto; 
        padding: 20px; 
        border-radius: 10px; 
        display: flex; 
        justify-content: center; 
        align-items: center; 
        flex-direction: column; 
        overflow-y: auto;
        font-size: 1.5rem;
    }

  
    #weather-info p {
        margin: 10px 0; 
    }

    #weather-input{
        font-family: monospace;
        padding: 8px;
        border-radius: 10px;
        max-height: 400px;
        max-width: 320px;
    }

    #search-button{
        display:flex;
        justify-content: center;
        font-family: monospace;
        padding: 8px;
        border-radius: 10px;
        max-height: 400px;
        max-width: 320px;
    }

    #weather-search{
        display: flex;
        justify-content: center;
        flex-direction: column;
        align-items:center;
    }

    @media (max-width: 600px){
         #weather-info {
            max-height: fit-content;
            width: 95%;
            overflow:visible;  
            font-size: medium;
            display: flex;
            justify-content: flex-start;  
            align-items: center;  
            flex-direction: column; 
            overflow-y: auto;
            padding-top: 10px;
        }
    }
   

   
</style>